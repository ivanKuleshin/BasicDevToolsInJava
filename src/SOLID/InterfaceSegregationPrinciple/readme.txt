Характеризуется следующим утверждением: клиенты не должны быть вынуждены реализовывать методы,
которые они не будут использовать.

Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента.
Клиенты не должны зависеть от интерфейсов, которые они не используют.
Принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы необходимо разделять
на более мелкие и специфические, чтобы клиенты мелких интерфейсов знали только о методах,
необходимых в работе. В итоге при изменении метода интерфейса не должны меняться клиенты,
которые этот метод не используют.

Рассмотрим пример.
Разработчик Алекс создал интерфейс "отчет" и добавил два метода: generateExcel() и generatedPdf().
Теперь клиент А хочет использовать этот интерфейс, но он намерен использовать отчеты только в PDF-формате,
а не в Excel. Устроит ли его такая функциональность?
Нет. Он должен будет реализовать два метода, один из которых по большому счету не нужен и существует
только благодаря Алексу — дизайнеру программного обеспечения. Клиент воспользуется либо другим интерфейсом,
либо оставит поле для Excel пустым.
Так в чем же решение? Оно состоит в разделении существующего интерфейса на два более мелких.
Один — отчет в формате PDF, второй — отчет в формате Excel. Это даст пользователю возможность использовать
только необходимый для него функционал.

